x-environment:
  &default-env
  ENVIRONMENT: development
  DEBUG: "true"
  LOG_LEVEL: DEBUG
  REDIS_URL: redis://redis:6379/0
  CELERY_BROKER_URL: redis://redis:6379/0
  CELERY_RESULT_BACKEND: redis://redis:6379/0
  DB_USER: postgres
  DB_PASSWORD: postgres
  DB_HOST: postgres
  DB_PORT: 5432
  DB_NAME: notification_service

services:
  notification-service:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["python", "-m", "uvicorn", "app.presentation.api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    environment:
      <<: *default-env
      TEST_MODE: "true"
    volumes:
      - ./app:/app/app
      - ./tests:/app/testsИсправь
      
    ports:
      - "8000:8000"
      - "5678:5678"  # For debugging
    depends_on:
      - redis
    networks:
      - notification-net
    restart: always

  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["python", "-m", "celery", "-A", "app.infrastructure.celery_config:celery_app", "worker", "--loglevel=info", "--concurrency=4"]
    environment:
      <<: *default-env
    volumes:
      - ./app:/app/app
    depends_on:
      - redis
    networks:
      - notification-net
    restart: always

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["python", "-m", "celery", "-A", "app.infrastructure.celery_config:celery_app", "beat", "--loglevel=info", "--schedule=/tmp/celerybeat-schedule"]
    environment:
      <<: *default-env
    volumes:
      - ./app:/app/app
    depends_on:
      - redis
    networks:
      - notification-net
    restart: always

  celery-flower:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["python", "-m", "celery", "-A", "app.infrastructure.celery_config:celery_app", "flower", "--port=5555"]
    environment:
      <<: *default-env
      FLOWER_UNAUTHENTICATED_API: "true"
    volumes:
      - ./app:/app/app
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - notification-net
    restart: always

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - notification-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    
  postgres:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: notification_service
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - notification-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

volumes:
  redis_data:
  postgres_data:

networks:
  notification-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16