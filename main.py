#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
"""

import asyncio
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.join(os.path.dirname(os.path.abspath(__file__)), 'src'))

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    print("üîî –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    print("=" * 50)
    print()

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–∏
        from src.config import Config, create_notification_service, setup_logging
        from src.models import NotificationMessage, User

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        setup_logging("INFO")

        print("‚úÖ –ú–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_summary = Config.get_summary()
        print("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        print(f"   - Email –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {config_summary['email_configured']}")
        print(f"   - SMS –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {config_summary['sms_configured']}")
        print(f"   - Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {config_summary['telegram_configured']}")
        print(f"   - –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {', '.join(config_summary['provider_order'])}")
        print()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        if not any([
            config_summary['email_configured'],
            config_summary['sms_configured'],
            config_summary['telegram_configured']
        ]):
            print("‚ö†Ô∏è  –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∏ –æ–¥–∏–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä!")
            print("   –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è.")
            print()
            print("üìñ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:")
            print("   python examples/reliability_test.py  # –¢–µ—Å—Ç —Å –º–æ–∫-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏")
            return 1

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        try:
            service = create_notification_service()
            print("‚úÖ –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
            status = await service.get_service_status()
            print(f"üè• –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞: {status['service_status']}")
            print(f"   –î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {status['available_providers']}/{status['total_providers']}")

            for provider in status['providers']:
                icon = "‚úÖ" if provider['available'] else "‚ùå"
                print(f"   {icon} {provider['name']}")
                if provider['error']:
                    print(f"      –û—à–∏–±–∫–∞: {provider['error']}")

            print()

            if status['available_providers'] == 0:
                print("‚ùå –ù–∏ –æ–¥–∏–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!")
                print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ")
                return 1

            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                id="demo_user",
                name="–î–µ–º–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                email="demo@example.com",  # –ú–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                phone="+1234567890",       # –ú–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ Twilio
                telegram_chat_id="123456789"  # –ú–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –±–æ—Ç–∞
            )

            # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = NotificationMessage(
                subject="üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!",
                content="""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!

–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

üîπ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {timestamp}
üîπ –í–∞—à ID: {user_id}

–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
‚úÖ Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚úÖ SMS —Å–æ–æ–±—â–µ–Ω–∏—è
‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚úÖ –ù–∞–¥–µ–∂–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É —Å fallback
‚úÖ –ú–∞—Å—Å–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                """.strip(),
                template_data={
                    "user_name": user.name,
                    "user_id": user.id,
                    "timestamp": "21 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –≥."
                }
            )

            print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...")
            print(f"   –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {user.name}")
            print(f"   –¢–µ–º–∞: {message.subject}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            from src.service import DeliveryStrategy

            report = await service.send_notification(
                user=user,
                message=message,
                strategy=DeliveryStrategy.FIRST_SUCCESS
            )

            print()
            print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏:")
            print(f"   –£—Å–ø–µ—à–Ω–æ: {'‚úÖ –î–∞' if report.success else '‚ùå –ù–µ—Ç'}")
            print(f"   –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {report.delivery_time:.2f} —Å–µ–∫")
            print(f"   –ü–æ–ø—ã—Ç–æ–∫: {report.total_attempts}")

            if report.success:
                print(f"   –£—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {', '.join(report.successful_providers)}")
                print(f"   –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {report.final_result.message}")

            if report.failed_providers:
                print(f"   –ù–µ—É–¥–∞—á–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {', '.join(report.failed_providers)}")

            print()
            print("üîç –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ø—ã—Ç–æ–∫:")
            for i, attempt in enumerate(report.attempts, 1):
                status_icon = "‚úÖ" if attempt.result.success else "‚ùå"
                print(f"   {i}. {attempt.provider.provider_name}: {status_icon}")
                print(f"      –°–æ–æ–±—â–µ–Ω–∏–µ: {attempt.result.message}")
                if attempt.result.error:
                    print(f"      –û—à–∏–±–∫–∞: {attempt.result.error}")

            print()
            if report.success:
                print("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            else:
                print("‚ö†Ô∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
                print("   –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é")

            print()
            print("üìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:")
            print("   python examples/simple_example.py     # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä")
            print("   python examples/bulk_example.py       # –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞")
            print("   python examples/reliability_test.py   # –¢–µ—Å—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞: {e}")
            return 1

    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        return 1
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

    return 0


if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
