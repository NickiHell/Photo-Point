[project]
name = "notification-service"
version = "0.1.0"
description = "A high-performance notification service with Clean Architecture"
authors = [
    {name = "NickiHell", email = "nicki@example.com"}
]
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.117.1",
    "uvicorn[standard]>=0.36.0",
    "pydantic>=2.11.9",
    "sqlalchemy>=2.0.43",
    "asyncpg>=0.30.0",
    "aiohttp>=3.12.15",
    "email-validator>=2.3.0",
    "structlog>=25.4.0",
    "twilio>=9.8.1",
    "click>=8.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "coverage>=7.10.6",
    "ruff>=0.13.1",
    "mypy>=1.18.2",
    "bandit>=1.7.10",
]

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "ARG002", # unused-method-args
    "ARG003", # unused-class-method-args
    "ARG004", # unused-static-method-args
    "ARG005", # unused-lambda-args
    "N",  # pep8-naming
    "S",  # flake8-bandit
]
ignore = [
    "S101",   # use of assert
    "S603",   # subprocess call - check for execution of untrusted input
    "S607",   # starting a process with a partial executable path
    "E501",   # line too long, handled by ruff format
    "B008",   # do not perform function calls in argument defaults
    "N805",   # first argument of a method should be named `self`
    "S104",   # binding to all interfaces
    "S105",   # hardcoded password (test fixtures)
    "S106",   # hardcoded password (test fixtures)
    "B904",   # exception chaining (legacy code)
    "ARG001", # unused arguments (legacy interfaces)
    "ARG002", # unused method arguments (legacy interfaces)
    "F401",   # unused imports (may be used by type checkers)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "ARG", "E501", "S105", "S106"]
"examples/*" = ["S101", "ARG", "E501", "S105", "S106", "B904"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = false
disallow_any_generics = false
disallow_incomplete_defs = false
disallow_untyped_defs = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_return_any = false
strict_equality = true
show_error_codes = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "twilio.*",
    "structlog.*",
    "email_validator.*",
    "aiohttp.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "asyncio: mark a test as async",
]
addopts = [
    "-ra",
    "--strict-markers",
    "--disable-warnings",
    "--cov=app",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=10",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/__pycache__/*",
    "*/tests/*",
    "*/test_*.py",
    "*/.venv/*",
    "*/venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.hatch.build.targets.wheel]
packages = ["app"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"